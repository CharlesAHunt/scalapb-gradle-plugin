// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package voz.auth.domain.Auth



@SerialVersionUID(0L)
final case class ChildTokenRequest(
    parentToken: String = "",
    needsVaultAuth: Boolean = false
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ChildTokenRequest] with com.trueaccord.lenses.Updatable[ChildTokenRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (parentToken != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, parentToken) }
      if (needsVaultAuth != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, needsVaultAuth) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = parentToken
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = needsVaultAuth
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): voz.auth.domain.Auth.ChildTokenRequest = {
      var __parentToken = this.parentToken
      var __needsVaultAuth = this.needsVaultAuth
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __parentToken = _input__.readString()
          case 16 =>
            __needsVaultAuth = _input__.readBool()
          case tag => _input__.skipField(tag)
        }
      }
      voz.auth.domain.Auth.ChildTokenRequest(
          parentToken = __parentToken,
          needsVaultAuth = __needsVaultAuth
      )
    }
    def withParentToken(__v: String): ChildTokenRequest = copy(parentToken = __v)
    def withNeedsVaultAuth(__v: Boolean): ChildTokenRequest = copy(needsVaultAuth = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = parentToken
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = needsVaultAuth
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(parentToken)
        case 2 => _root_.scalapb.descriptors.PBoolean(needsVaultAuth)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = voz.auth.domain.Auth.ChildTokenRequest
}

object ChildTokenRequest extends com.trueaccord.scalapb.GeneratedMessageCompanion[voz.auth.domain.Auth.ChildTokenRequest] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[voz.auth.domain.Auth.ChildTokenRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): voz.auth.domain.Auth.ChildTokenRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    voz.auth.domain.Auth.ChildTokenRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), false).asInstanceOf[Boolean]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[voz.auth.domain.Auth.ChildTokenRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      voz.auth.domain.Auth.ChildTokenRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = voz.auth.domain.Auth.ChildTokenRequest(
  )
  implicit class ChildTokenRequestLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, voz.auth.domain.Auth.ChildTokenRequest]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, voz.auth.domain.Auth.ChildTokenRequest](_l) {
    def parentToken: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.parentToken)((c_, f_) => c_.copy(parentToken = f_))
    def needsVaultAuth: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.needsVaultAuth)((c_, f_) => c_.copy(needsVaultAuth = f_))
  }
  final val PARENT_TOKEN_FIELD_NUMBER = 1
  final val NEEDS_VAULT_AUTH_FIELD_NUMBER = 2
}
