// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package voz.auth.domain.Auth



/** Request
  */
@SerialVersionUID(0L)
final case class TokenRequest(
    subject: String = "",
    role: voz.auth.domain.Auth.Role = voz.auth.domain.Auth.Role.Service,
    customClaims: scala.collection.immutable.Map[String, String] = scala.collection.immutable.Map.empty,
    audience: scala.Option[String] = None,
    vaultToken: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TokenRequest] with com.trueaccord.lenses.Updatable[TokenRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (subject != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, subject) }
      if (role != voz.auth.domain.Auth.Role.Service) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, role.value) }
      customClaims.foreach(customClaims => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(voz.auth.domain.Auth.TokenRequest._typemapper_customClaims.toBase(customClaims).serializedSize) + voz.auth.domain.Auth.TokenRequest._typemapper_customClaims.toBase(customClaims).serializedSize)
      if (audience.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(voz.auth.domain.Auth.TokenRequest._typemapper_audience.toBase(audience.get).serializedSize) + voz.auth.domain.Auth.TokenRequest._typemapper_audience.toBase(audience.get).serializedSize }
      if (vaultToken.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toBase(vaultToken.get).serializedSize) + voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toBase(vaultToken.get).serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = subject
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = role
        if (__v != voz.auth.domain.Auth.Role.Service) {
          _output__.writeEnum(2, __v.value)
        }
      };
      customClaims.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(voz.auth.domain.Auth.TokenRequest._typemapper_customClaims.toBase(__v).serializedSize)
        voz.auth.domain.Auth.TokenRequest._typemapper_customClaims.toBase(__v).writeTo(_output__)
      };
      audience.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(voz.auth.domain.Auth.TokenRequest._typemapper_audience.toBase(__v).serializedSize)
        voz.auth.domain.Auth.TokenRequest._typemapper_audience.toBase(__v).writeTo(_output__)
      };
      vaultToken.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toBase(__v).serializedSize)
        voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toBase(__v).writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): voz.auth.domain.Auth.TokenRequest = {
      var __subject = this.subject
      var __role = this.role
      val __customClaims = (scala.collection.immutable.Map.newBuilder[String, String] ++= this.customClaims)
      var __audience = this.audience
      var __vaultToken = this.vaultToken
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __subject = _input__.readString()
          case 16 =>
            __role = voz.auth.domain.Auth.Role.fromValue(_input__.readEnum())
          case 26 =>
            __customClaims += voz.auth.domain.Auth.TokenRequest._typemapper_customClaims.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry.defaultInstance))
          case 34 =>
            __audience = Some(voz.auth.domain.Auth.TokenRequest._typemapper_audience.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __audience.map(voz.auth.domain.Auth.TokenRequest._typemapper_audience.toBase).getOrElse(com.google.protobuf.wrappers.StringValue.defaultInstance))))
          case 42 =>
            __vaultToken = Some(voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __vaultToken.map(voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toBase).getOrElse(com.google.protobuf.wrappers.StringValue.defaultInstance))))
          case tag => _input__.skipField(tag)
        }
      }
      voz.auth.domain.Auth.TokenRequest(
          subject = __subject,
          role = __role,
          customClaims = __customClaims.result(),
          audience = __audience,
          vaultToken = __vaultToken
      )
    }
    def withSubject(__v: String): TokenRequest = copy(subject = __v)
    def withRole(__v: voz.auth.domain.Auth.Role): TokenRequest = copy(role = __v)
    def clearCustomClaims = copy(customClaims = scala.collection.immutable.Map.empty)
    def addCustomClaims(__vs: (String, String)*): TokenRequest = addAllCustomClaims(__vs)
    def addAllCustomClaims(__vs: TraversableOnce[(String, String)]): TokenRequest = copy(customClaims = customClaims ++ __vs)
    def withCustomClaims(__v: scala.collection.immutable.Map[String, String]): TokenRequest = copy(customClaims = __v)
    def getAudience: String = audience.getOrElse(voz.auth.domain.Auth.TokenRequest._typemapper_audience.toCustom(com.google.protobuf.wrappers.StringValue.defaultInstance))
    def clearAudience: TokenRequest = copy(audience = None)
    def withAudience(__v: String): TokenRequest = copy(audience = Some(__v))
    def getVaultToken: String = vaultToken.getOrElse(voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toCustom(com.google.protobuf.wrappers.StringValue.defaultInstance))
    def clearVaultToken: TokenRequest = copy(vaultToken = None)
    def withVaultToken(__v: String): TokenRequest = copy(vaultToken = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = subject
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = role.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => customClaims.map(voz.auth.domain.Auth.TokenRequest._typemapper_customClaims.toBase)(_root_.scala.collection.breakOut)
        case 4 => audience.map(voz.auth.domain.Auth.TokenRequest._typemapper_audience.toBase).orNull
        case 5 => vaultToken.map(voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toBase).orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(subject)
        case 2 => _root_.scalapb.descriptors.PEnum(role.scalaValueDescriptor)
        case 3 => _root_.scalapb.descriptors.PRepeated(customClaims.map(voz.auth.domain.Auth.TokenRequest._typemapper_customClaims.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 4 => audience.map(voz.auth.domain.Auth.TokenRequest._typemapper_audience.toBase(_).toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => vaultToken.map(voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toBase(_).toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = voz.auth.domain.Auth.TokenRequest
}

object TokenRequest extends com.trueaccord.scalapb.GeneratedMessageCompanion[voz.auth.domain.Auth.TokenRequest] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[voz.auth.domain.Auth.TokenRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): voz.auth.domain.Auth.TokenRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    voz.auth.domain.Auth.TokenRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      voz.auth.domain.Auth.Role.fromValue(__fieldsMap.getOrElse(__fields.get(1), voz.auth.domain.Auth.Role.Service.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry]].map(voz.auth.domain.Auth.TokenRequest._typemapper_customClaims.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[com.google.protobuf.wrappers.StringValue]].map(voz.auth.domain.Auth.TokenRequest._typemapper_audience.toCustom),
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[com.google.protobuf.wrappers.StringValue]].map(voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toCustom)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[voz.auth.domain.Auth.TokenRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      voz.auth.domain.Auth.TokenRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        voz.auth.domain.Auth.Role.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(voz.auth.domain.Auth.Role.Service.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(voz.auth.domain.Auth.TokenRequest._typemapper_customClaims.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[com.google.protobuf.wrappers.StringValue]]).map(voz.auth.domain.Auth.TokenRequest._typemapper_audience.toCustom),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[com.google.protobuf.wrappers.StringValue]]).map(voz.auth.domain.Auth.TokenRequest._typemapper_vaultToken.toCustom)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry
      case 4 => __out = com.google.protobuf.wrappers.StringValue
      case 5 => __out = com.google.protobuf.wrappers.StringValue
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]](
    _root_.voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => voz.auth.domain.Auth.Role
    }
  }
  lazy val defaultInstance = voz.auth.domain.Auth.TokenRequest(
  )
  @SerialVersionUID(0L)
  final case class CustomClaimsEntry(
      key: String = "",
      value: String = ""
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CustomClaimsEntry] with com.trueaccord.lenses.Updatable[CustomClaimsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, value) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: String): CustomClaimsEntry = copy(key = __v)
      def withValue(__v: String): CustomClaimsEntry = copy(value = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry
  }
  
  object CustomClaimsEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = voz.auth.domain.Auth.TokenRequest.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = voz.auth.domain.Auth.TokenRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry(
    )
    implicit class CustomClaimsEntryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry](_l) {
      def key: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.com.trueaccord.scalapb.TypeMapper[voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry, (String, String)] =
      _root_.com.trueaccord.scalapb.TypeMapper[voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry, (String, String)](__m => (__m.key, __m.value))(__p => voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry(__p._1, __p._2))
  }
  
  implicit class TokenRequestLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, voz.auth.domain.Auth.TokenRequest]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, voz.auth.domain.Auth.TokenRequest](_l) {
    def subject: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.subject)((c_, f_) => c_.copy(subject = f_))
    def role: _root_.com.trueaccord.lenses.Lens[UpperPB, voz.auth.domain.Auth.Role] = field(_.role)((c_, f_) => c_.copy(role = f_))
    def customClaims: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.collection.immutable.Map[String, String]] = field(_.customClaims)((c_, f_) => c_.copy(customClaims = f_))
    def audience: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getAudience)((c_, f_) => c_.copy(audience = Some(f_)))
    def optionalAudience: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.audience)((c_, f_) => c_.copy(audience = f_))
    def vaultToken: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getVaultToken)((c_, f_) => c_.copy(vaultToken = Some(f_)))
    def optionalVaultToken: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.vaultToken)((c_, f_) => c_.copy(vaultToken = f_))
  }
  final val SUBJECT_FIELD_NUMBER = 1
  final val ROLE_FIELD_NUMBER = 2
  final val CUSTOM_CLAIMS_FIELD_NUMBER = 3
  final val AUDIENCE_FIELD_NUMBER = 4
  final val VAULT_TOKEN_FIELD_NUMBER = 5
  @transient
  private val _typemapper_customClaims: _root_.com.trueaccord.scalapb.TypeMapper[voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry, (String, String)] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[voz.auth.domain.Auth.TokenRequest.CustomClaimsEntry, (String, String)]]
  @transient
  private val _typemapper_audience: _root_.com.trueaccord.scalapb.TypeMapper[com.google.protobuf.wrappers.StringValue, String] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.google.protobuf.wrappers.StringValue, String]]
  @transient
  private val _typemapper_vaultToken: _root_.com.trueaccord.scalapb.TypeMapper[com.google.protobuf.wrappers.StringValue, String] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.google.protobuf.wrappers.StringValue, String]]
}
